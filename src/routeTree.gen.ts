/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/__root'
import { Route as AdminRouteRouteImport } from './app/admin/route'
import { Route as IndexRouteImport } from './app/index'
import { Route as AdminIndexRouteImport } from './app/admin/index'
import { Route as TeaIdRouteImport } from './app/tea.$id'
import { Route as AdminTeasRouteImport } from './app/admin/teas'
import { Route as AdminTagsRouteImport } from './app/admin/tags'
import { Route as AdminCategoriesRouteImport } from './app/admin/categories'
import { Route as AdminTeaCreateRouteImport } from './app/admin/tea.create'
import { Route as AdminTeaIdRouteImport } from './app/admin/tea.$id'

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const TeaIdRoute = TeaIdRouteImport.update({
  id: '/tea/$id',
  path: '/tea/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminTeasRoute = AdminTeasRouteImport.update({
  id: '/teas',
  path: '/teas',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminTagsRoute = AdminTagsRouteImport.update({
  id: '/tags',
  path: '/tags',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminCategoriesRoute = AdminCategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminTeaCreateRoute = AdminTeaCreateRouteImport.update({
  id: '/tea/create',
  path: '/tea/create',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminTeaIdRoute = AdminTeaIdRouteImport.update({
  id: '/tea/$id',
  path: '/tea/$id',
  getParentRoute: () => AdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/tags': typeof AdminTagsRoute
  '/admin/teas': typeof AdminTeasRoute
  '/tea/$id': typeof TeaIdRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/tea/$id': typeof AdminTeaIdRoute
  '/admin/tea/create': typeof AdminTeaCreateRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/tags': typeof AdminTagsRoute
  '/admin/teas': typeof AdminTeasRoute
  '/tea/$id': typeof TeaIdRoute
  '/admin': typeof AdminIndexRoute
  '/admin/tea/$id': typeof AdminTeaIdRoute
  '/admin/tea/create': typeof AdminTeaCreateRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/tags': typeof AdminTagsRoute
  '/admin/teas': typeof AdminTeasRoute
  '/tea/$id': typeof TeaIdRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/tea/$id': typeof AdminTeaIdRoute
  '/admin/tea/create': typeof AdminTeaCreateRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/categories'
    | '/admin/tags'
    | '/admin/teas'
    | '/tea/$id'
    | '/admin/'
    | '/admin/tea/$id'
    | '/admin/tea/create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/categories'
    | '/admin/tags'
    | '/admin/teas'
    | '/tea/$id'
    | '/admin'
    | '/admin/tea/$id'
    | '/admin/tea/create'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin/categories'
    | '/admin/tags'
    | '/admin/teas'
    | '/tea/$id'
    | '/admin/'
    | '/admin/tea/$id'
    | '/admin/tea/create'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  TeaIdRoute: typeof TeaIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/tea/$id': {
      id: '/tea/$id'
      path: '/tea/$id'
      fullPath: '/tea/$id'
      preLoaderRoute: typeof TeaIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/teas': {
      id: '/admin/teas'
      path: '/teas'
      fullPath: '/admin/teas'
      preLoaderRoute: typeof AdminTeasRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/tags': {
      id: '/admin/tags'
      path: '/tags'
      fullPath: '/admin/tags'
      preLoaderRoute: typeof AdminTagsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/categories': {
      id: '/admin/categories'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/tea/create': {
      id: '/admin/tea/create'
      path: '/tea/create'
      fullPath: '/admin/tea/create'
      preLoaderRoute: typeof AdminTeaCreateRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/tea/$id': {
      id: '/admin/tea/$id'
      path: '/tea/$id'
      fullPath: '/admin/tea/$id'
      preLoaderRoute: typeof AdminTeaIdRouteImport
      parentRoute: typeof AdminRouteRoute
    }
  }
}

interface AdminRouteRouteChildren {
  AdminCategoriesRoute: typeof AdminCategoriesRoute
  AdminTagsRoute: typeof AdminTagsRoute
  AdminTeasRoute: typeof AdminTeasRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminTeaIdRoute: typeof AdminTeaIdRoute
  AdminTeaCreateRoute: typeof AdminTeaCreateRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminCategoriesRoute: AdminCategoriesRoute,
  AdminTagsRoute: AdminTagsRoute,
  AdminTeasRoute: AdminTeasRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminTeaIdRoute: AdminTeaIdRoute,
  AdminTeaCreateRoute: AdminTeaCreateRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  TeaIdRoute: TeaIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
